// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pras.Models;

#nullable disable

namespace Pras.Models.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Pras.Models.Base", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Bases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 8, 19, 45, 30, 0, DateTimeKind.Unspecified),
                            Email = "main@pras.com",
                            Password = "12345",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Pras.Models.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CheckTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.HasIndex("UserId");

                    b.ToTable("Checks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseId = 1,
                            CheckTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Number = "CHK-001",
                            PaymentType = "Cash",
                            TotalAmount = 0.0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Pras.Models.CheckProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CheckId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PriceAtSale")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CheckId");

                    b.HasIndex("ProductId");

                    b.ToTable("CheckProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckId = 1,
                            PriceAtSale = 0.0,
                            ProductId = 1,
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = 2,
                            CheckId = 1,
                            PriceAtSale = 0.0,
                            ProductId = 2,
                            Quantity = 0.0
                        });
                });

            modelBuilder.Entity("Pras.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseId = 1,
                            DocumentNumber = "INV-001",
                            InvoiceDate = new DateTime(2025, 10, 8, 19, 45, 30, 0, DateTimeKind.Unspecified),
                            SupplierName = "Supplier X",
                            TotalAmount = 0.0
                        });
                });

            modelBuilder.Entity("Pras.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CostPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseId = 1,
                            Code = 111222333,
                            CostPrice = 0.0,
                            Name = "Product A",
                            Price = 0.0,
                            Quantity = 0.0,
                            Status = false
                        },
                        new
                        {
                            Id = 2,
                            BaseId = 1,
                            Code = 333222,
                            CostPrice = 0.0,
                            Name = "Product B",
                            Price = 0.0,
                            Quantity = 0.0,
                            Status = false
                        });
                });

            modelBuilder.Entity("Pras.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@pras.com",
                            IsAdmin = false,
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("Pras.Models.Check", b =>
                {
                    b.HasOne("Pras.Models.Base", "Base")
                        .WithMany("Checks")
                        .HasForeignKey("BaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pras.Models.User", "User")
                        .WithMany("Checks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Base");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pras.Models.CheckProducts", b =>
                {
                    b.HasOne("Pras.Models.Check", "Check")
                        .WithMany("CheckProducts")
                        .HasForeignKey("CheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pras.Models.Product", "Product")
                        .WithMany("CheckProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Check");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Pras.Models.Invoice", b =>
                {
                    b.HasOne("Pras.Models.Base", "Base")
                        .WithMany("Invoices")
                        .HasForeignKey("BaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Base");
                });

            modelBuilder.Entity("Pras.Models.Product", b =>
                {
                    b.HasOne("Pras.Models.Base", "Base")
                        .WithMany("Products")
                        .HasForeignKey("BaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Base");
                });

            modelBuilder.Entity("Pras.Models.Base", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("Invoices");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Pras.Models.Check", b =>
                {
                    b.Navigation("CheckProducts");
                });

            modelBuilder.Entity("Pras.Models.Product", b =>
                {
                    b.Navigation("CheckProducts");
                });

            modelBuilder.Entity("Pras.Models.User", b =>
                {
                    b.Navigation("Checks");
                });
#pragma warning restore 612, 618
        }
    }
}
